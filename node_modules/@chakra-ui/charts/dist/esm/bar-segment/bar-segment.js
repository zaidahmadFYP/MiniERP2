"use strict";
"use client";
import { jsx, jsxs } from 'react/jsx-runtime';
import { Stack, HStack, Box, FormatNumber, ColorSwatch, Text, Span, Flex } from '@chakra-ui/react';
import * as React from 'react';

const ChartContext = React.createContext({});
function BarSegmentRoot(props) {
  const { chart, barSize = "10", children, ...rest } = props;
  return /* @__PURE__ */ jsx(Stack, { gap: "4", ...rest, css: { "--bar-size": chart.size(barSize) }, children: /* @__PURE__ */ jsx(ChartContext.Provider, { value: chart, children }) });
}
const BarSegmentContent = React.forwardRef(
  function BarSegmentContent2(props, ref) {
    const chart = React.useContext(ChartContext);
    return /* @__PURE__ */ jsx(
      Stack,
      {
        w: "full",
        gap: "1",
        ref,
        onMouseLeave: () => chart.setHighlightedSeries(null),
        ...props
      }
    );
  }
);
function BarSegmentLabel(props) {
  const chart = React.useContext(ChartContext);
  const getPercent = (value) => chart.getValuePercent("value", value);
  return /* @__PURE__ */ jsx(HStack, { ...props, children: chart.data.map((item) => /* @__PURE__ */ jsx(
    HStack,
    {
      flexShrink: "0",
      textStyle: "sm",
      fontWeight: "medium",
      lineClamp: 1,
      style: {
        ["--bar-percent"]: `${getPercent(item.value)}%`
      },
      flex: "var(--bar-percent)",
      children: item.name
    },
    item.name
  )) });
}
function BarSegmentBar(props) {
  const { tooltip, children, ...rest } = props;
  const chart = React.useContext(ChartContext);
  const getPercent = (value) => chart.getValuePercent("value", value);
  return /* @__PURE__ */ jsxs(HStack, { pos: "relative", gap: "1", ...rest, children: [
    chart.data.map((item) => /* @__PURE__ */ jsxs(
      Box,
      {
        pos: "relative",
        flexShrink: "0",
        flex: "var(--bar-percent)",
        height: "var(--bar-size)",
        bg: item.color,
        rounded: "l1",
        onMouseMove: () => {
          if (!tooltip) return;
          chart.setHighlightedSeries(item.name);
        },
        style: {
          ["--bar-percent"]: `${getPercent(item.value)}%`
        },
        children: [
          typeof tooltip === "function" ? tooltip({ payload: item }) : null,
          typeof tooltip === "boolean" && tooltip && /* @__PURE__ */ jsx(BarSegmentTooltip, { payload: item })
        ]
      },
      item.name
    )),
    children
  ] });
}
function BarSegmentReference(props) {
  const { value, label, ...rest } = props;
  const chart = React.useContext(ChartContext);
  const getPercent = (value2) => chart.getValuePercent("value", value2);
  return /* @__PURE__ */ jsx(
    Box,
    {
      h: label ? "150%" : "100%",
      pos: "absolute",
      insetStart: `var(--bar-percent)`,
      bottom: "0",
      style: { ["--bar-percent"]: `${getPercent(value)}%` },
      ...rest,
      children: /* @__PURE__ */ jsxs(Flex, { gap: "2", h: "full", children: [
        /* @__PURE__ */ jsx(
          Span,
          {
            w: "2px",
            h: "100%",
            bg: "bg.inverted",
            outline: "2px solid {colors.bg}"
          }
        ),
        label && /* @__PURE__ */ jsx(Span, { fontWeight: "medium", textStyle: "xs", pos: "relative", top: "-4px", children: label })
      ] })
    }
  );
}
function BarSegmentValue(props) {
  const chart = React.useContext(ChartContext);
  const getPercent = (value) => chart.getValuePercent("value", value);
  return /* @__PURE__ */ jsx(HStack, { ...props, children: chart.data.map((item) => /* @__PURE__ */ jsx(
    HStack,
    {
      textStyle: "sm",
      fontWeight: "medium",
      flexShrink: "0",
      style: {
        ["--bar-percent"]: `${getPercent(item.value)}%`
      },
      flex: "var(--bar-percent)",
      children: /* @__PURE__ */ jsx(
        FormatNumber,
        {
          value: item.value,
          notation: "compact",
          maximumFractionDigits: 2
        }
      )
    },
    item.name
  )) });
}
function BarSegmentLegend(props) {
  const { showPercent, showValue, valueFormatter, ...rest } = props;
  const chart = React.useContext(ChartContext);
  const formatter = valueFormatter || chart.formatNumber({ maximumFractionDigits: 2 });
  return /* @__PURE__ */ jsx(HStack, { wrap: "wrap", gap: "4", textStyle: "sm", ...rest, children: chart.data.map((item) => /* @__PURE__ */ jsxs(HStack, { children: [
    /* @__PURE__ */ jsx(
      ColorSwatch,
      {
        value: chart.color(item.color),
        boxSize: "0.82em",
        rounded: "full"
      }
    ),
    /* @__PURE__ */ jsxs(HStack, { gap: "1.5", children: [
      /* @__PURE__ */ jsx(Text, { children: item.name }),
      showValue && /* @__PURE__ */ jsx(Span, { fontWeight: "medium", children: formatter(item.value) }),
      showPercent && /* @__PURE__ */ jsxs(Span, { color: "fg.muted", children: [
        chart.getValuePercent("value", item.value).toFixed(0),
        "%"
      ] })
    ] })
  ] }, item.name)) });
}
function BarSegmentTooltip(props) {
  const { payload, ...rest } = props;
  const chart = React.useContext(ChartContext);
  if (!payload || chart.highlightedSeries !== payload.name) return null;
  const formatter = chart.formatNumber({ maximumFractionDigits: 2 });
  return /* @__PURE__ */ jsxs(
    HStack,
    {
      pos: "absolute",
      top: "-4",
      right: "4",
      bg: "bg.panel",
      textStyle: "xs",
      zIndex: "1",
      px: "2.5",
      py: "1",
      gap: "1.5",
      rounded: "l2",
      shadow: "md",
      ...rest,
      children: [
        /* @__PURE__ */ jsx(
          ColorSwatch,
          {
            value: chart.color(payload.color),
            boxSize: "0.82em",
            rounded: "full"
          }
        ),
        /* @__PURE__ */ jsx(Span, { children: payload.name }),
        /* @__PURE__ */ jsx(Span, { fontFamily: "mono", fontWeight: "medium", children: formatter(payload.value) })
      ]
    }
  );
}

export { BarSegmentBar, BarSegmentContent, BarSegmentLabel, BarSegmentLegend, BarSegmentReference, BarSegmentRoot, BarSegmentTooltip, BarSegmentValue };
